grammar: statement(s /;/)

statement: empty_statement | pragma | parameter_declaration | rule
empty_statement:
pragma: agent_declaration | preamble | prompt | weight

agent_declaration: agent_keyword(?) agent_label identifier(s)
agent_keyword: '#agent'
agent_label: <skip:''> '@' identifier
identifier: m/[a-z]\w+/

preamble: '#preamble' code_or_quote
code_or_quote: code_block | string_literal
code_block: <perl_codeblock>
string_literal: <perl_quotelike>

prompt: '#prompt' code_or_quote
weight: '#weight' agent_label code_block

parameter_declaration: '(' identifier(s /,/) ')' '=' '(' numeric_constant(s /,/) ')'
numeric_constant: m/[0-9\.e\+\-]+/

rule: grammar_symbol '->' production(s /|/)
production: quantified_rhs_symbol(s?) rule_prob_expr(?)

grammar_symbol: <skip:''> identifier agent_label(?)

rhs_symbol: grammar_symbol
 | '(' production '|' production(s /|/) ')'
 | <skip:''> narrative_literal agent_label(?)
 | <skip:''> choice_narrative_literal agent_label(?)
 | <skip:''> narrative_code agent_label(?)
 | <skip:''> choice_narrative_code agent_label(?)

quantified_rhs_symbol: <skip:''> rhs_symbol quantifier(?)

narrative_literal: string_literal
narrative_code: code_block
choice_narrative_literal: <skip:''> string_literal '=>' string_literal
choice_narrative_code: <skip:''> string_literal '=>' code_block

quantifier: '?' | '*' | '+' | '{' m/[0-9]*/ '}' | '{' m/[0-9]*/ ',' m/[0-9]*/ '}'

rule_prob_expr: paren_expr
paren_expr: '(' expr ')'
expr: <leftop: sum_expr '*' sum_expr>
sum_expr: <leftop: atom_expr '+' atom_expr>
atom_expr: identifier | numeric_constant | paren_expr
