{ use Gertie;
  use Gertie::Robin;
  use Data::Dumper;
  my ($gertie, $robin);
  my ($choice_text, $narrative_text);
  my ($lhs, @lhs_stack);
  sub begin_lhs { push @lhs_stack, $lhs; $lhs = shift }
  sub end_lhs { $lhs = pop @lhs_stack }
  1 }

grammar:
{ $gertie = Gertie->new_gertie (defined($arg{'gertie_args'}) ? @{$arg{'gertie_args'}} : ());
  $robin = Gertie::Robin->new_robin ($gertie, defined($arg{'robin_args'}) ? @{$arg{'robin_args'}} : ());
  1 }
 statement_list eofile
{ $gertie->add_deferred_rules;
  $gertie->index;
  $return = $robin;
  1 }
eofile: m/^\Z/

statement_list: comment(s?) statement comment(s?) additional_statement(s?) semicolon(?) comment(s?)
statement: parameter_declaration | game_declaration | rule
additional_statement: semicolon comment(s?) statement comment(s?)
semicolon: ';'
comment: '//' <resync>

game_declaration: (preamble | prompt | agent_declaration | agent_model | agent_weight | agent_strategy)

parameter_declaration: param_keyword(?) '(' param_list ')' '=' '(' value_list ')'
{ $gertie->declare_params (@item{qw(param_list value_list)}); 1 }
param_keyword: '#param'
param_list: identifier(s /\s*,\s*/)
value_list: numeric_constant(s /\s*,\s*/)
identifier: m/[a-z]\w*/
numeric_constant: m/[0-9\.e\+\-]+/

preamble: '#preamble' code_or_quote { $robin->preamble_text ($item{'code_or_quote'}); 1 }
code_or_quote: embedded_code_block | string_literal
embedded_code_block: code_block { $return = '%'.$item{'code_block'}.'%'; 1 }
code_block: <perl_codeblock>
string_literal: m/\s*(".*?(?<!\\)"|'.*?(?<!\\)')\s*/

prompt: '#prompt' code_or_quote
<error: #prompt is not yet implemented>

agent_declaration: agent_keyword(?) agent_label agent_terminals
 { $gertie->declare_agent_ownership ($item{'agent_label'}, @{$item{'agent_terminals'}}); 1 }
agent_keyword: '#agent'
agent_label: agent_prefix_symbol identifier { $return = $item{'identifier'}; 1 }
agent_prefix_symbol: '@'
agent_terminals: grammar_symbol(s?)

agent_model: '#model' agent_label grammar_symbol
<error: #model is not yet implemented>

agent_weight: '#weight' agent_label code_block
<error: #weight is not yet implemented>

agent_strategy: '#strategy' agent_label ('mortal' | 'drunk' | 'greedy')
<error: #strategy is not yet implemented>

rule_op: '->'
rule: narrative_rule | generic_rule

narrative_rule:
 lhs_symbol rule_op narrative_term
{ ($choice_text, $narrative_text) = @{$item{'narrative_term'}};
  $robin->{'choice_text'}->{$item{'lhs_symbol'}} = $choice_text;
  $robin->{'narrative_text'}->{$item{'lhs_symbol'}} = $narrative_text;
  $return = $item{'lhs_symbol'};
  1 }

generic_rule:
 quantified_lhs_symbol rule_op
{ begin_lhs ($item{'quantified_lhs_symbol'}); 1 }
 one_or_more_productions
{ $return = $lhs; end_lhs(); 1 }

production: delayed_production
{ $gertie->expand_rule ($lhs, @{$item{'delayed_production'}}) if defined $gertie; 1 }

delayed_production: comment(s?) quantified_rhs_symbol(s?) rule_prob_expr(?)
{ $return = [$item{'quantified_rhs_symbol(s?)'}, @{$item{'rule_prob_expr(?)'}}]; 1 }

alternate_production: comment(s?) '|' production

one_or_more_productions:
 production alternate_production(s?)

grammar_symbol: 'start' | identifier agent_suffix(?)
 { $return = join ("", $item{'identifier'}, @{$item{'agent_suffix(?)'}}); 1 }
agent_suffix: agent_prefix_symbol agent_identifier
 { $return = join ("", @item{qw(agent_prefix_symbol agent_identifier)}); 1 }

agent_identifier: identifier | positive_integer
positive_integer: m/[1-9]\d*/

rhs_symbol: 'end'
 | nested_rule
 | anonymous_alternation
 | anonymous_narrative_symbol agent_suffix(?)
{ $return = join("", $item{'anonymous_narrative_symbol'}, @{$item{'agent_suffix(?)'}}); 1 }
 | grammar_symbol

nested_rule: '(' rule ')'
{ $return = $item{'rule'}; 1 }

anonymous_alternation:
 '(' delayed_production '|'
 <commit>
{ begin_lhs ($gertie->new_anonymous_symbol);
  $gertie->expand_rule ($lhs, @{$item{'delayed_production'}});
  1 }
 one_or_more_productions ')'
{ $return = $lhs; end_lhs(); 1 }

quantified_rhs_symbol: rhs_symbol quantifier(?) comment(s?)
{ $return = join ("", $item{'rhs_symbol'}, @{$item{'quantifier(?)'}}); 1 }

lhs_symbol: grammar_symbol

quantified_lhs_symbol: lhs_symbol quantifier(?)
{ $return = join ("", $item{'lhs_symbol'}, @{$item{'quantifier(?)'}}); 1 }

anonymous_narrative_symbol: narrative_term agent_suffix(?)
{ $return = $gertie->new_anonymous_symbol;
  $gertie->term_owner_by_name->{$return} = $item{'agent_suffix(?)'}->[0] if @{$item{'agent_suffix(?)'}};
  ($choice_text, $narrative_text) = @{$item{'narrative_term'}};
  $robin->choice_text->{$return} = $choice_text;
  $robin->narrative_text->{$return} = $narrative_text;
  1 }

narrative_term:
 afforded_narrative_literal
 | narrative_code
 | afforded_narrative_code
 | afforded_narrative_alias
 | affordance_aliased_narrative_literal
 | affordance_aliased_narrative_code
 | basic_narrative_literal

basic_narrative_literal: narrative_literal
{ $return = [@item{qw(narrative_literal narrative_literal)}]; 1 }
afforded_narrative_literal: choice_text '=>' narrative_literal
{ $return = [@item{qw(choice_text narrative_literal)}]; 1 }
afforded_narrative_code: choice_text '=>' narrative_code
{ $return = [@item{qw(choice_text narrative_code)}]; 1 }
afforded_narrative_alias: choice_text '=>' narrative_symbol
{ $return = [$item{'choice_text'}, $robin->{'narrative_text'}->{$item{'narrative_symbol'}}]; 1 }
affordance_aliased_narrative_literal: narrative_symbol '=>' narrative_literal
{ $return = [$robin->{'choice_text'}->{$item{'narrative_symbol'}}, $item{'narrative_literal'}]; 1 }
affordance_aliased_narrative_code: narrative_symbol '=>' narrative_code
{ $return = [$robin->{'choice_text'}->{$item{'narrative_symbol'}}, $item{'narrative_code'}]; 1 }

narrative_literal: string_literal
narrative_code: embedded_code_block
narrative_symbol: grammar_symbol
choice_text: string_literal

quantifier: '?' | '*' | '+'
 | '[' m/\d*/ ']'
{ join ("", @item[1..3]) }
 | '[' m/\d*/ ',' m/\d*/ ']'
{ join ("", @item[1..5]) }

rule_prob_expr: numeric_constant | '(' expr ')'
 { $return = $item{'expr'}; 1 }

paren_expr: '(' expr ')'
 { $return = join ("", @item[1..$#item]); 1 }
expr: product_expr '+' expr
 { $return = join ("", @item[1..$#item]); 1 }
 | product_expr
product_expr: atom_expr '*' product_expr
 { $return = join ("", @item[1..$#item]); 1 }
 | atom_expr
atom_expr: identifier | numeric_constant | paren_expr
