{
  use Gertie;
  use Gertie::Robin;
  use Data::Dumper;
  my $gertie = Gertie->new_gertie;
  my $robin = Gertie::Robin->new_robin($gertie);
  my ($lhs, @lhs_stack);   # @lhs_stack is needed for nested anonymous rules
  sub begin_lhs { push @lhs_stack, $lhs; $lhs = shift }
  sub end_lhs { $lhs = pop @lhs_stack }
}
grammar: statement_list eofile { $gertie->add_deferred_rules; $gertie->index; $return = $robin; 1 }
eofile: /^\Z/

statement_list: statement semicolon statement_list | statement semicolon(?)
statement: parameter_declaration | game_declaration | rule { $return = 1 }
semicolon: ';'

game_declaration: (preamble | prompt | agent_declaration | agent_model | agent_weight | agent_strategy)

parameter_declaration: param_keyword(?) '(' param_list ')' '=' '(' value_list ')'
{ $gertie->declare_params (@item{qw(param_list value_list)}); 1 }
param_keyword: '#param'
param_list: identifier(s /\s*,\s*/)
value_list: numeric_constant(s /\s*,\s*/)
identifier: m/[a-z]\w*/
numeric_constant: m/[0-9\.e\+\-]+/

preamble: '#preamble' code_or_quote { $robin->preamble_text ($item{'code_or_quote'}); 1 }
code_or_quote: embedded_code_block | string_literal
embedded_code_block: code_block { $return = '%{'.$item{'code_block'}.'}%'; 1 }
code_block: <perl_codeblock>
string_literal: <perl_quotelike>

prompt: '#prompt' code_or_quote
<error: #prompt is not yet implemented>

agent_declaration: agent_keyword(?) agent_label agent_terminals
 { $gertie->declare_agent_ownership ($item{'agent_label'}, @{$item{'agent_terminals'}}); 1 }
agent_keyword: '#agent'
agent_label: agent_prefix_symbol(?) identifier { $return = $item{'identifier'}; 1 }
agent_prefix_symbol: '@'
agent_terminals: grammar_symbol(s)

agent_model: '#model' agent_label grammar_symbol
<error: #model is not yet implemented>

agent_weight: '#weight' agent_label code_block
<error: #weight is not yet implemented>

agent_strategy: '#strategy' agent_label ('mortal' | 'drunk' | 'greedy')
<error: #strategy is not yet implemented>

rule: quantified_lhs_symbol ('->' | ':') <commit>
 { $lhs = $item{'quantified_lhs_symbol'}; $return = 1 }
 one_or_more_productions

production: delayed_production
{ $gertie->expand_rule ($lhs, @{$item{'delayed_production'}}); 1 }

delayed_production: quantified_rhs_symbol(s?) rule_prob_expr(?)
{ $return = [$item{'quantified_rhs_symbol(s?)'}, @{$item{'rule_prob_expr(?)'}}]; 1 }

alternate_production: '|' production

one_or_more_productions:
 production alternate_production(s?)

grammar_symbol: 'start' | identifier agent_suffix(?)
 { $return = join ("", $item{'identifier'}, @{$item{'agent_suffix(?)'}}); 1 }
agent_suffix: agent_prefix_symbol identifier
 { $return = join ("", @item{qw(agent_prefix_symbol identifier)}); 1 }

rhs_symbol: grammar_symbol
 | 'end'
 | anonymous_alternation
 | anonymous_narrative_symbol agent_label(?)
{ $return = join("", $item{'anonymous_narrative_symbol'}, @{$item{'agent_label(?)'}}); 1 }

anonymous_alternation:
 '(' delayed_production '|'
 <commit>
{ begin_lhs ($gertie->new_anonymous_symbol);
  $gertie->expand_rule ($lhs, @{$item{'delayed_production'}});
  1 }
 one_or_more_productions ')'
{ $return = $lhs; end_lhs(); 1 }

quantified_rhs_symbol: rhs_symbol quantifier(?)
{ $return = join ("", $item{'rhs_symbol'}, @{$item{'quantifier(?)'}}); 1 }

quantified_lhs_symbol: grammar_symbol quantifier(?)
{ $return = join ("", $item{'grammar_symbol'}, @{$item{'quantifier(?)'}}); 1 }

anonymous_narrative_symbol:
 (narrative_literal
  | afforded_narrative_literal
  | narrative_code
  | afforded_narrative_code
  | afforded_narrative_alias)
{ $return = $gertie->new_anonymous_symbol;
  $robin->choice_text->{$return} = $item[1]->[0];
  $robin->narrative_text->{$return} = $item[1]->[1];
  1; }

narrative_literal: string_literal
narrative_code: embedded_code_block
afforded_narrative_literal: choice_text '=>' narrative_text
{ $return = [@item{qw(choice_text narrative_text)}]; 1 }
afforded_narrative_code: choice_text '=>' narrative_code
{ $return = [@item{qw(choice_text narrative_code)}]; 1 }
afforded_narrative_alias: choice_text '=>' narrative_symbol
{ $return = [$item{'choice_text'}, $robin->narrative_text->{$item{'narrative_symbol'}}]; 1 }

choice_text: string_literal
narrative_text: string_literal
narrative_code: embedded_code_block
narrative_symbol: grammar_symbol

quantifier: '?' | '*' | '+' | '{' m/\d*/ '}' | '{' m/\d*/ ',' m/\d*/ '}'

rule_prob_expr: '(' expr ')'
 { $return = $item{'expr'}; 1 }

paren_expr: '(' expr ')'
 { $return = join ("", @item[1..$#item]); 1 }
expr: product_expr '+' expr
 { $return = join ("", @item[1..$#item]); 1 }
 | product_expr
product_expr: atom_expr '*' product_expr
 { $return = join ("", @item[1..$#item]); 1 }
 | atom_expr
atom_expr: identifier | numeric_constant | paren_expr
