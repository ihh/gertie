{
  use Gertie;
  use Gertie::Robin;
  use Data::Dumper;
  my $gertie = Gertie->new_gertie();
  my $robin = Gertie::Robin->new_robin($gertie);
  my ($lhs, @lhs_stack);   # @lhs_stack is needed for nested anonymous rules
}
grammar: statement_list eofile { $gertie->add_deferred_rules; $gertie->index; $return = $robin }
eofile: /^\Z/

statement_list: statement semicolon statement_list | statement semicolon(?)
statement: parameter_declaration | game_declaration | rule
semicolon: ';'

game_declaration: (preamble | prompt | agent_declaration | agent_model | agent_weight | agent_strategy)

parameter_declaration: param_keyword(?) '(' param_list ')' '=' '(' value_list ')'
{ $gertie->declare_params (@item{qw(param_list value_list)}) }
param_keyword: '#param'
param_list: identifier(s /\s*,\s*/)
value_list: numeric_constant(s /\s*,\s*/)
identifier: m/[a-z]\w*/
numeric_constant: m/[0-9\.e\+\-]+/

preamble: '#preamble' code_or_quote { $robin->preamble_text ($item{'code_or_quote'}) }
code_or_quote: embedded_code_block | string_literal
embedded_code_block: code_block { $return = '%{'.$item{'code_block'}.'}%' }
code_block: <perl_codeblock>
string_literal: <perl_quotelike>

prompt: '#prompt' code_or_quote
<error: #prompt is not yet implemented>

agent_declaration: agent_keyword(?) agent_label agent_terminals
 { $gertie->declare_agent_ownership ($item{'agent_label'}, @{$item{'agent_terminals'}}) }
agent_keyword: '#agent'
agent_label: agent_prefix_symbol(?) identifier { $return = $item{'identifier'} }
agent_prefix_symbol: '@'
agent_terminals: grammar_symbol(s)

agent_model: '#model' agent_label grammar_symbol
<error: #model is not yet implemented>

agent_weight: '#weight' agent_label code_block
<error: #weight is not yet implemented>

agent_strategy: '#strategy' agent_label ('mortal' | 'drunk' | 'greedy')
<error: #strategy is not yet implemented>

rule: grammar_symbol ('->' | ':')
 { $lhs = $item{'grammar_symbol'} }
 at_least_one_production

production: delayed_production
{ $gertie->expand_rule (@{$item{'delayed_production'}}) }

delayed_production: quantified_rhs_symbol(s?) rule_prob_expr(?)
{ $return = [$lhs, $item{'quantified_rhs_symbol(s?)'}, @{$item{'rule_prob_expr(?)'}}] }

alternate_production: '|' production

at_least_one_production: production alternate_production(s?)

at_least_two_productions: delayed_production '|'
{ $gertie->expand_rule (@{$item{'delayed_production'}}) }
at_least_one_production

grammar_symbol: 'start' | identifier agent_suffix(?)
 { $return = join ("", $item{'identifier'}, @{$item{'agent_suffix(?)'}}) }
agent_suffix: agent_prefix_symbol identifier
 { $return = join ("", @item{qw(agent_prefix_symbol identifier)}) }

rhs_symbol: grammar_symbol
 | 'end'
 | '(' at_least_two_productions ')'
 | narrative_literal
 | afforded_narrative_literal
 | narrative_code
 | afforded_narrative_code
 | afforded_narrative_alias

quantified_rhs_symbol: rhs_symbol quantifier(?)
{ $return = join ("", $item{'rhs_symbol'}, @{$item{'quantifier(?)'}}) }

narrative_literal: string_literal agent_label(?)
narrative_code: embedded_code_block agent_label(?)
afforded_narrative_literal: string_literal '=>' string_literal agent_label(?)
afforded_narrative_code: string_literal '=>' embedded_code_block agent_label(?)
afforded_narrative_alias: string_literal '=>' grammar_symbol agent_label(?)

quantifier: '?' | '*' | '+' | '{' m/\d*/ '}' | '{' m/\d*/ ',' m/\d*/ '}'

rule_prob_expr: '(' expr ')'
 { $return = $item{'expr'} }

paren_expr: '(' expr ')'
 { $return = join ("", @item[1..3]) }
expr: product_expr '+' expr
 { warn "in expr: item=", Data::Dumper->new([\@item])->Dump;
   $return = join ("", @item[1..$#item]) }
 | product_expr
product_expr: atom_expr '*' product_expr
 { warn "in expr: item=", Data::Dumper->new([\@item])->Dump;
   $return = join ("", @item[1..$#item]) }
 | atom_expr
atom_expr: identifier | numeric_constant | paren_expr
